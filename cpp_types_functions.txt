8 bits = 256 = 2^8
16 bits = 65 536 = 2^16
32 bits = 4 294 967 296 = 2^32
64 bits = 18 446 744 073 709 551 616 = 2^64

&& : Logical AND (true only if both expressions are true)
|| : Logical OR (true when at least one of the expressions are true)
! : Negation (true if the expression is false)

Overloadable operators:
	+  -  *  /  %  ^  &  |  ~  !  =  <  >  <=  >=  +=  -=  *=  /=  %=  ^=  &=  |=  <<  >>  >>=  <<=  ==  !=  &&  ||  ++  --  ,  ->*  ()  []

Character types
{
	char : Exactly one byte in size. At least 8 bits.
	char16_t : Not smaller than char. At least 16 bits.
	char32_t : Not smaller than char16_t. At least 32 bits.
	wchar_t: Can represent the largest supported character set.
}

Integer types(signed)
{
	signed char : At least 8 bits.
	signed short int : At least 16 bits.
	signed int : At least 16 bits.
	signed long int : At least 32 bits.
	signed long long int : At least 64 bits.
}

Integer types(unsigned)
{
	unsigned char : At least 8 bits.
	unsigned short int : At least 16 bits.
	unsigned int : At least 16 bits.
	unsigned long int : At least 32 bits.
	unsigned long long int : At least 64 bits.
}

Floating-point types: float, double, long double
Boolean type: bool
Void types: void
Null pointer: NULL, nullptr(c++11)

Declaring constants: 
	const:
		Defines that the type is constant. The constant objects are non-mutable and cannot be modified. Attempt to do directly gives compile-time error, and to do so indirectly gives "modifying the const object through a reference or pointer to non-const type".
	constexpr(since c++11, supported by Visual Studio 2015):
		Can be used for variables and functions. The value of constexpr variable or function is known on compile time.
	
	constexpr functions:
		it must not be virtual.
		it's return type must be LiteralType.
		each of it's parameters must be LiteralType.

	constexpr variables:
		it's type must be LiteralType.	
		it must be immediately constructed or assigned a value.
		the constructor parameters or the value to be assigned must contain only literal values, constexpr variables and functions.
		the constructor used to construct the object (either implicit or explicit) must satisfy the requirements of constexpr constructor. In the case of explicit constructor, it must have constexpr specified.
	
	std::initializer_list<TYPE>(since c++11) // Creates a list of constant values
		Iterating through initializer_list:
			for(auto idx = initializer_list.begin();idx!=initializer_list.end();++idx) { std::cout << *idx << std::endl; } 
	enum class (Cannot be iterated)

Declaring functions:
	RETURN_TYPE FUNCTION_NAME(PARAMETERS)
	{	
		FUNCTION_BODY
	}
	Examples:
		Function without parameters:
			int five() { return 5; } // return type is int
			void print() { std::cout<<"SOMETHING"; } //void functions does not have return type

Declaring lambda expressions:
	// parsing the value of the function right after the initialization
	[](FUNTION_TYPE input) { return input; }(input_value);
		Example:
			[](int input) { return input * input; }(10); //The functions takes one parameter with value 10 and returns the square of it.
	(since c++11):
		auto FUNCTION_NAME = [](T x, U y) { return x + y; }
		calling:
			FUNCTION_NAME(x_value, y_value);

	(since c++14):
		auto FUNCTION_NAME = [](auto x, auto y) { return x + y; }
		calling:
			FUNCTION_NAME(x_value, y_value);

	auto : Type specifier which returns the type of (T + U). Does not perform automatic type detection. It only serves as a part of the syntax.
	
	Lambda expressions as parameters:
		using mapper = RETURN_TYPE(*)(PARAMETER_TYPE); //pointer to a function
		Example:
			using mapper = void(*)(int);
			void print_element(int element)
			{
				std::cout << element << std::endl;
			}
			void map(mapper fn, int element)
			{
				fn(element);
			}
			Calling the function:
				int main(){
					map(print_element, 5); //it will print 5 on the screen
					return 0;
				}


for(std::vector<T>::iterator it = vector.begin;it!=vector.end();++it){ cout<< *it;}